#include <WiFi.h>
#include <DHT.h>
#include <ESP32Servo.h>

#define DHT_PIN 5
#define LED_PIN 22
#define LED_PINs 17
#define LED_PIN_3 15    // New LED pin
#define pump 21     // First servo pin
#define Fan 18       // Second servo pin
#define TRIG_PIN 4           // Ultrasonic sensor trigger pin
#define ECHO_PIN 2           // Ultrasonic sensor echo pin
#define LIGHT_SENSOR_PIN 34  // Light sensor pin
#define MOTION_SENSOR_PIN 16 // Motion sensor pin

const char* ssid = "helloworld";
const char* password = "12345678";
WiFiServer server(80);
DHT dht(DHT_PIN, DHT11);

void setup() {
  Serial.begin(115200);
  pinMode(LED_PINs, OUTPUT);
  pinMode(pump, OUTPUT);
  pinMode(Fan, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  pinMode(LED_PIN_3, OUTPUT);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(LIGHT_SENSOR_PIN, INPUT);
  pinMode(MOTION_SENSOR_PIN, INPUT); // Initialize motion sensor pin
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
  server.begin();
  Serial.println("Server started");
  dht.begin();
  ESP32PWM::allocateTimer(0);
}
unsigned long lastMotionTime = 0;
const unsigned long motionTimeout = 300; // 3 seconds

void loop() {
  WiFiClient client = server.available();
  if (client) {
    Serial.println("Client connected");
    while (client.connected()) {
      float temperatureC = dht.readTemperature();
      float humidity = dht.readHumidity();
      int lightSensorValue = analogRead(LIGHT_SENSOR_PIN);
      long distance = getUltrasonicDistance();
      int motionSensorValue = digitalRead(MOTION_SENSOR_PIN);

      client.print("Temperature: ");
      client.print(temperatureC);
      client.println(" Â°C");
      client.print("Humidity: ");
      client.print(humidity);
      client.println(" %");
      client.print("Light Sensor Analog Value: ");
      client.println(lightSensorValue);
      client.print("Ultrasonic Sensor Distance: ");
      client.print(distance);
      client.println(" cm");
      client.print("Motion Sensor Value: ");
      client.println(motionSensorValue); // Print motion sensor value

      // Add a slight delay for stabilization
      delay(100);

      Serial.print("Light Sensor Value: ");
      Serial.println(lightSensorValue);
      Serial.print("Motion Sensor Value: ");
      Serial.println(motionSensorValue); // Print motion sensor value

      if (lightSensorValue < 150 || motionSensorValue == HIGH) {
        digitalWrite(LED_PINs, HIGH);  // Turn on LED
        Serial.println("LED turned ON");
        // Reset the timer when motion is detected
        lastMotionTime = millis();
      } else {
        // Check if motion is not detected for 3 seconds
        if (millis() - lastMotionTime > motionTimeout && motionSensorValue == LOW) {
          digitalWrite(LED_PINs, LOW);  // Turn off LED
          Serial.println("LED turned OFF");
        }
      }

      if (distance > 8) {
        digitalWrite(pump, LOW);  // Turn on pump
        Serial.println("Pump turned ON");
      } else {
        digitalWrite(pump, HIGH);  // Turn off pump
        Serial.println("Pump turned OFF");
      }

      if (client.available()) {
        String command = client.readStringUntil('\n');
        Serial.print("Received command: ");
        Serial.println(command);

        if (command.equals("LIGHTS_ON")) {
          digitalWrite(LED_PIN, HIGH);
          Serial.println("LED turned ON");
        } else if (command.equals("LIGHTS_OFF")) {
          digitalWrite(LED_PIN, LOW);
          Serial.println("LED turned OFF");
        } else if (command.equals("FAN_ON")) {
          digitalWrite(Fan, LOW);  // Turn on fan
          Serial.println("Fan turned ON");
        } else if (command.equals("FAN_OFF")) {
          digitalWrite(Fan, HIGH);  // Turn off fan
          Serial.println("Fan turned OFF");
        } else if (command.equals("LED3_ON")) {
          digitalWrite(LED_PIN_3, HIGH);  // Turn on LED3
          Serial.println("LED3 turned ON");
        } else if (command.equals("LED3_OFF")) {
          digitalWrite(LED_PIN_3, LOW);  // Turn off LED3
          Serial.println("LED3 turned OFF");
        } else {
          Serial.println("Unknown command");
        }
      }
      delay(1000);
    }
    Serial.println("Client disconnected");
  }
}




long getUltrasonicDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  return pulseIn(ECHO_PIN, HIGH) / 58.2;  // Convert pulse duration to distance in cm
}